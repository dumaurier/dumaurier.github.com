<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="//feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="//feed.xml" rel="self" type="application/atom+xml" /><link href="//" rel="alternate" type="text/html" /><updated>2017-04-29T16:47:20+00:00</updated><id>///</id><title type="html">Josh Vogt</title><entry><title type="html">CSS Grid Layout and Absolute Positioning</title><link href="//blog/css-grid-layout-and-absolute-positioning/" rel="alternate" type="text/html" title="CSS Grid Layout and Absolute Positioning" /><published>2017-04-26T22:46:00+00:00</published><updated>2017-04-26T22:46:00+00:00</updated><id>//blog/css-grid-layout-and-absolute-positioning</id><content type="html" xml:base="//blog/css-grid-layout-and-absolute-positioning/">&lt;header&gt;
&lt;h1&gt;CSS Grid Layout and Absolute Positioning&lt;/h1&gt;
April 26, 2017
&lt;/header&gt;

&lt;p&gt;A quick explanation of &lt;code class=&quot;highlighter-rouge&quot;&gt;absolute&lt;/code&gt; positioning when used with CSS Grid Layout.&lt;/p&gt;

&lt;h2 id=&quot;position-absolute-amp-css-grid-layout&quot;&gt;position: absolute; &amp;amp; css grid layout.&lt;/h2&gt;

&lt;p&gt;CSS Grid Layout allows elements with absolute positioning to be placed along a grid containers grid lines. But as with any elements that use absolute or fixed positioning things can get weird in a hurry if you’re not careful. Here’s what the spec says about absolute positioning:&lt;/p&gt;

&lt;blockquote cite=&quot;https://www.w3.org/TR/css3-grid-layout/#abspos&quot;&gt;
  &lt;p&gt;If an absolutely positioned element’s containing block is generated by a grid container, the containing block corresponds to the grid area determined by its grid-placement properties. The offset properties (top/right/bottom/left) then indicate offsets inwards from the corresponding edges of this containing block, as normal.
  &lt;/p&gt;
  &lt;cite&gt;&lt;a href=&quot;https://www.w3.org/TR/css3-grid-layout/#abspos&quot;&gt;
    CSS Grid Layout Module Level 1 -- 10. Absolute Positioning
  &lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;how it works.&lt;/h2&gt;

&lt;p&gt;When setting up your grid, add &lt;code class=&quot;highlighter-rouge&quot;&gt;position: relative;&lt;/code&gt; to the grid container:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* creates absolute positioning containing block */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.absolute-item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create an absolutely positioned item that behaves the same way it would if its parent had its display property set to &lt;code class=&quot;highlighter-rouge&quot;&gt;block;&lt;/code&gt;.&lt;/p&gt;

&lt;p data-height=&quot;447&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;ee10495ea7f47a81e3abe7960f6af159&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;josh_vogt&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;ee10495ea7f47a81e3abe7960f6af159&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/josh_vogt/pen/ee10495ea7f47a81e3abe7960f6af159/&quot;&gt;ee10495ea7f47a81e3abe7960f6af159&lt;/a&gt; by Josh Vogt (&lt;a href=&quot;http://codepen.io/josh_vogt&quot;&gt;@josh_vogt&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;If you define a grid area to contain the element the offset properties like &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; will apply to the outer grid lines of the absolutely positioned element. In this case, the abspos item has been given a large grid area defined as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* creates absolute positioning containing block */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.absolute-item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can see the example on CodePen &lt;a href=&quot;https://codepen.io/josh_vogt/pen/67cbf4ac487883abf4cfa6aa2a711bb4&quot;&gt;here&lt;/a&gt; but it’s best to see what’s happening using Firefox’s grid inspector:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../static-assets/images/grid-area.png&quot; alt=&quot;Image of Firefox's grid inspector showing layout&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The abspos item is aligned to its grid area and the offsets are applied after its position in the grid is applied.&lt;/p&gt;

&lt;h2 id=&quot;how-absolute-positioning-impacts-grid-layout&quot;&gt;how absolute positioning impacts grid layout.&lt;/h2&gt;

&lt;p&gt;One thing to keep in mind when using &lt;code class=&quot;highlighter-rouge&quot;&gt;position: absolute&lt;/code&gt; on an element of a grid container is that the normal rules of absolute positioning apply. This means that while you will be able to align the element to the containers grid lines, the positioned element won’t take up any space in the grid nor will it effect the layout of other grid items.&lt;/p&gt;

&lt;p&gt;This CodePen demonstrates a simple grid with an aboslutely positioned element:&lt;/p&gt;

&lt;p data-height=&quot;500&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;EmZmee&quot; data-default-tab=&quot;result&quot; data-user=&quot;josh_vogt&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Grid Layout - Item Placement &amp;amp; Absolute Positioning&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/josh_vogt/pen/EmZmee/&quot;&gt;CSS Grid Layout - Item Placement &amp;amp; Absolute Positioning&lt;/a&gt; by Josh Vogt (&lt;a href=&quot;http://codepen.io/josh_vogt&quot;&gt;@josh_vogt&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The grid items in this demo are layed out using numeric indexes and spans, auto placement and absolute positioning. Absolute positioning allows you to place grid items above or below the positioned element. Overlapping grid items can also be done by assigning items to the same parts of the grid using the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-row&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-column&lt;/code&gt; or the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-area&lt;/code&gt; but this will impact how other grid items are aligned to the grid.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;summary.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;absolutely positioned items can be aligned to either a grid container or a defined grid area&lt;/li&gt;
  &lt;li&gt;if an aboslutely positioned item is assigned a grid area, offset properties area applied based on the grid areas grid lines&lt;/li&gt;
  &lt;li&gt;as with anything that is absolutely positioned, it will be pulled from the document flow and will not impact the layout of other elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;learn-more-about-css-grid-layout&quot;&gt;Learn more about CSS Grid Layout.&lt;/h3&gt;

&lt;p&gt;The two easiest things to do if you want to learn more about CSS Grid Layout is follow &lt;a href=&quot;https://twitter.com/rachelandrew&quot;&gt;Rachel Andrew&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jensimmons&quot;&gt;Jen Simmons&lt;/a&gt; on Twitter and read their blogs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rachelandrew.co.uk/archives/&quot;&gt;Rachel Andrew’s blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jensimmons.com/writing&quot;&gt;Jen Simmons’ blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-resources&quot;&gt;Other Resources.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout&quot;&gt;MDN - CSS Grid Layout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css3-grid-layout/&quot;&gt;CSS Grid Layout Module - Level 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/developer/css-grid/&quot;&gt;Mozilla - Weird CSS Grid Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Corrections or comment can be directed to my twitter account &lt;a href=&quot;https://twitter.com/jshvgt&quot;&gt;@jshvgt&lt;/a&gt;.&lt;/p&gt;</content><category term="css" /><category term="css grid layout" /><summary type="html">CSS Grid Layout and Absolute Positioning
April 26, 2017</summary></entry><entry><title type="html">Layout Differences Between CSS Grid Layout and Multi-Column Layout</title><link href="//blog/layout-differences-between-css-grid-layout-and-multi-column/" rel="alternate" type="text/html" title="Layout Differences Between CSS Grid Layout and Multi-Column Layout" /><published>2017-04-18T22:17:00+00:00</published><updated>2017-04-18T22:17:00+00:00</updated><id>//blog/layout-differences-between-css-grid-layout-and-multi-column</id><content type="html" xml:base="//blog/layout-differences-between-css-grid-layout-and-multi-column/">&lt;header&gt;
&lt;h1&gt;Layout Differences Between CSS Grid Layout and Multi-Column Layout&lt;/h1&gt;
April 18, 2017
&lt;/header&gt;

&lt;p&gt;CSS Grid Layout and Multi-Column Layout share one key feature: the ability to layout content in columns. The important difference is multi-column is best suited for laying out the content of an element while grid layout is best suited for layout a page.&lt;/p&gt;

&lt;h2 id=&quot;refer-to-the-spec&quot;&gt;Refer to the spec.&lt;/h2&gt;

&lt;p&gt;Multi-column allows CSS authors to create a type of container called a &lt;code class=&quot;highlighter-rouge&quot;&gt;column box&lt;/code&gt;. As the spec says, “The content of a multicol element is flowed into its column boxes.” Neither grid nor flexbox containers allow content to flow because they lack the concept of the column box. Depending on how the grid is defined CSS Grid Layout will assign each element on the grid container to its own grid track.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From the Multi-Column Layout Spec:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote cite=&quot;https://drafts.csswg.org/static/css-multicol/#introduction&quot;&gt;
&lt;p&gt;This module describes multi-column layout in CSS. By using functionality described in this document, style sheets can declare that the content of an element is to be laid out in multiple columns.&lt;/p&gt;
  &lt;cite&gt;&lt;a href=&quot;https://drafts.csswg.org/static/css-multicol/#introduction&quot;&gt;CSS Multi-column Layout Module Level 1&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;From the CSS Grid Layout Spec:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote cite=&quot;https://drafts.csswg.org/css-grid/#intro&quot;&gt;
&lt;p&gt;
Grid Layout is a new layout model for CSS that has powerful abilities to control the sizing and positioning of boxes and their contents. Unlike Flexible Box Layout, which is single-axis–oriented, Grid Layout is optimized for 2-dimensional layouts: those in which alignment of content is desired in both dimensions.&lt;/p&gt;
&lt;cite&gt;&lt;a href=&quot;https://drafts.csswg.org/css-grid/#intro&quot;&gt;CSS Grid Layout Module Level 1&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;multicol-example&quot;&gt;Multicol example.&lt;/h3&gt;

&lt;p&gt;This multicol example show two sentences flowing between two column boxes. The height of each column will be filled with content before it flows into the next column box.&lt;/p&gt;

&lt;p data-height=&quot;520&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;028aa7c1e4c221332024b555aa8f4394&quot; data-default-tab=&quot;result&quot; data-user=&quot;josh_vogt&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Multicol Example&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/josh_vogt/pen/028aa7c1e4c221332024b555aa8f4394/&quot;&gt;CSS Multicol Example&lt;/a&gt; by Josh Vogt (&lt;a href=&quot;http://codepen.io/josh_vogt&quot;&gt;@josh_vogt&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;css-grid-layout-example&quot;&gt;CSS grid layout example.&lt;/h3&gt;

&lt;p&gt;This grid layout example show the same two sentences laid out in a simple two column grid. Instead of politing flowing between the two columns grid layout assigns each element to its own grid track. While the columns will be equal height their content will not.&lt;/p&gt;

&lt;p data-height=&quot;520&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;20b289f291828106d28228358e27bbe5&quot; data-default-tab=&quot;result&quot; data-user=&quot;josh_vogt&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Grid 2 Column&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/josh_vogt/pen/20b289f291828106d28228358e27bbe5/&quot;&gt;Grid 2 Column&lt;/a&gt; by Josh Vogt (&lt;a href=&quot;http://codepen.io/josh_vogt&quot;&gt;@josh_vogt&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The grid example gets even less compelling if the available contents exist in a single element as the grid container with 2 columns will create an empty grid track. Multicols ability to gracefully flow content between column boxes isn’t something that can achieved with other CSS layout techniques. I’m sure if someone felt so inclined they could write some JS that would do it - but if CSS already does it so nicely there’s really no reason to.&lt;/p&gt;

&lt;h2 id=&quot;a-case-where-css-grid-layout-might-be-better-than-multicol&quot;&gt;A case where CSS grid layout might be better than multicol.&lt;/h2&gt;

&lt;p&gt;Lists are one of the few examples where CSS Grid Layout might work over Multicol though it depends on how you want the items to be displayed. Remember that multicol will let the content flow from column box to column box so the list will flow down to the bottom of the first column box then move to the top of the second column box.&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;fdce8ea3c4254615d41d1b16db84c852&quot; data-default-tab=&quot;result&quot; data-user=&quot;josh_vogt&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Multicol list&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/josh_vogt/pen/fdce8ea3c4254615d41d1b16db84c852/&quot;&gt;Multicol list&lt;/a&gt; by Josh Vogt (&lt;a href=&quot;http://codepen.io/josh_vogt&quot;&gt;@josh_vogt&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;On the other hand a grid container, using a simple two column grid, will place the the grid items automatically along the column axis until there are no more available grid cells available. It will then move down along the row axis to find the next grid cell. In the case of my alphabetical list of mostly real food the items will be place left to right on a per row basis.&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;d9beba89e279fc15f1cf506f73d7293b&quot; data-default-tab=&quot;result&quot; data-user=&quot;josh_vogt&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Grid List&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/josh_vogt/pen/d9beba89e279fc15f1cf506f73d7293b/&quot;&gt;Grid List&lt;/a&gt; by Josh Vogt (&lt;a href=&quot;http://codepen.io/josh_vogt&quot;&gt;@josh_vogt&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://drafts.csswg.org/css-grid/&quot;&gt;CSS Grid Layout Module - Level 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://drafts.csswg.org/static/css-multicol/&quot;&gt;CSS Multi-column Layout Module Level 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Corrections or comment can be directed to my twitter account &lt;a href=&quot;https://twitter.com/jshvgt&quot;&gt;@jshvgt&lt;/a&gt;.&lt;/p&gt;</content><category term="css" /><category term="css grid layout" /><summary type="html">Layout Differences Between CSS Grid Layout and Multi-Column Layout
April 18, 2017</summary></entry><entry><title type="html">CSS Grid Layout - Understanding Grid Template Areas</title><link href="//blog/css-grid-layout-grid-template-areas/" rel="alternate" type="text/html" title="CSS Grid Layout - Understanding Grid Template Areas" /><published>2017-04-02T22:13:00+00:00</published><updated>2017-04-02T22:13:00+00:00</updated><id>//blog/css-grid-layout-grid-template-areas</id><content type="html" xml:base="//blog/css-grid-layout-grid-template-areas/">&lt;header&gt;
&lt;h1&gt;CSS Grid Layout - Understanding Grid Template Areas&lt;/h1&gt;
April 02, 2017
&lt;/header&gt;

&lt;p&gt;This article references the new &lt;a href=&quot;https://drafts.csswg.org/css-grid/&quot;&gt;CSS Grid Layout Module&lt;/a&gt;. More specifically, it covers the &lt;a href=&quot;https://drafts.csswg.org/css-grid/#grid-template-areas-property&quot;&gt;grid-template-areas&lt;/a&gt; property. It is a powerfuly property that lets you visualize your grid in your CSS and explictly place grid items in a named area.&lt;/p&gt;

&lt;h2 id=&quot;defining-a-simple-grid&quot;&gt;Defining a simple grid.&lt;/h2&gt;

&lt;p&gt;As simple grid layout could be a page with a sidebar and large content container surronded by a header and footer.The basic markup would consist of something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;main&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;grid-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nav&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;footer&lt;/code&gt; will span the full width of the container while the sidebar will take up about a 25% of the container and the content will fill the rest. To express this with &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt; I’ll need to apply the following CSS the the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-container&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.grid-container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;/* 1 */&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;/* 2 */&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4rem&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* 3 */&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;/* 4 */&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;/* 5 */&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&quot; header header &quot;&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&quot; nav content &quot;&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&quot; footer footer &quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Set the &lt;code class=&quot;highlighter-rouge&quot;&gt;display&lt;/code&gt; property to &lt;code class=&quot;highlighter-rouge&quot;&gt;grid&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt; property to set the number of coumns and define their width (in this exampe I’m using the new &lt;a href=&quot;https://www.w3.org/TR/2011/WD-css3-values-20110906/#fr-unit&quot;&gt;fr unit&lt;/a&gt; to set the width of the first column to 1/4 of the available width and content section to 3/4 of the available width.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-rows&lt;/code&gt; property can be used to define the height of the rows. In this example the &lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;footer&lt;/code&gt; will take 4rem and 3rem respectivly and the body content will take up the remaining available space.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-gap&lt;/code&gt; property defines the grid’s gutters and is shorthand for &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-column-gap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-row-gap&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;This is the fun part. &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt; defines the areas available in the grid. The name given to grid areas are arbitrary but should be sensible. The &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-areas&lt;/code&gt; also provides a crude visual representation of the page layout.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Child elements of a grid are assigned to their location using the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-area&lt;/code&gt; property on the child elements. This is a very simple example but it already demonstrates the power the CSS Grid Layout. Simply changing the name a classes &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-area&lt;/code&gt; can drastically change the layout.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.nav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-area&lt;/code&gt; in the CodePen below can really mess with the layout. In a good way.&lt;/p&gt;

&lt;p data-height=&quot;420&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;NpozaQ&quot; data-default-tab=&quot;result&quot; data-user=&quot;josh_vogt&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Basic CSS Grid Layout&quot; data-editable=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/josh_vogt/pen/NpozaQ/&quot;&gt;Basic CSS Grid Layout&lt;/a&gt; by Josh Vogt (&lt;a href=&quot;http://codepen.io/josh_vogt&quot;&gt;@josh_vogt&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;creating-a-nested-grid&quot;&gt;Creating a nested grid.&lt;/h2&gt;

&lt;p&gt;CSS Grid Layout Level 1 was initially meant to include subgrid layout as well but as Rachel Andrew has pointed out, this have been moved to &lt;a href=&quot;https://rachelandrew.co.uk/archives/2017/03/16/subgrid-moved-to-level-2-of-the-css-grid-specification/&quot;&gt;Level 2 of the CSS Grid specification&lt;/a&gt;. However, creating a nested grid is a simple as applying &lt;code class=&quot;highlighter-rouge&quot;&gt;display: grid;&lt;/code&gt; to an element whose parent is a grid container. In this example the simple layout above will have its &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; grid-area contain its own two-column grid.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* from the previous example */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* two columns of equal width */&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The nested grid will now contain a two-column grid of items, each column will take 50% of available space.&lt;/p&gt;

&lt;p data-height=&quot;420&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;RpveZB&quot; data-default-tab=&quot;result&quot; data-user=&quot;josh_vogt&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Basic CSS Grid Layout with nested grid&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/josh_vogt/pen/RpveZB/&quot;&gt;Basic CSS Grid Layout with nested grid&lt;/a&gt; by Josh Vogt (&lt;a href=&quot;http://codepen.io/josh_vogt&quot;&gt;@josh_vogt&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;learn-more-about-css-grid-layout&quot;&gt;Learn more about CSS Grid Layout.&lt;/h2&gt;

&lt;p&gt;The two easiest things to do if you want to learn more about CSS Grid Layout is follow &lt;a href=&quot;https://twitter.com/rachelandrew&quot;&gt;Rachel Andrew&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jensimmons&quot;&gt;Jen Simmons&lt;/a&gt; on Twitter and read their blogs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rachelandrew.co.uk/archives/&quot;&gt;Rachel Andrew’s blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jensimmons.com/writing&quot;&gt;Jen Simmons’ blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-resources&quot;&gt;Other Resources.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout&quot;&gt;MDN - CSS Grid Layout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css3-grid-layout/&quot;&gt;CSS Grid Layout Module - Level 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/developer/css-grid/&quot;&gt;Mozilla - Weird CSS Grid Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Corrections or comment can be directed to my twitter account &lt;a href=&quot;https://twitter.com/jshvgt&quot;&gt;@jshvgt&lt;/a&gt;.&lt;/p&gt;</content><category term="css" /><category term="css grid layout" /><summary type="html">CSS Grid Layout - Understanding Grid Template Areas
April 02, 2017</summary></entry><entry><title type="html">Critical Path CSS and Jekyll</title><link href="//blog/critcal-path-jekyll/" rel="alternate" type="text/html" title="Critical Path CSS and Jekyll" /><published>2017-03-11T22:16:01+00:00</published><updated>2017-03-11T22:16:01+00:00</updated><id>//blog/critcal-path-jekyll</id><content type="html" xml:base="//blog/critcal-path-jekyll/">&lt;header&gt;
&lt;h1&gt;Creating Page specific critical CSS using Gulp and Jekyll's `_includes` directory&lt;/h1&gt;
March 11, 2017

&lt;/header&gt;

&lt;p&gt;
  When creating landing pages, the same critical CSS wont always include the CSS you need to render the page. If you know that your above the fold content is going to be similar you can use a simpler, more generic approach.
&lt;/p&gt;

&lt;h2&gt;The easy way.&lt;/h2&gt;
&lt;p&gt;
  Add a file in Jekyll's &lt;code&gt;_includes&lt;/code&gt; folder called &lt;code&gt;critical.css&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
  In the &lt;code&gt;head&lt;/code&gt; of you document include the following snippet. This will include all the CSS in your &lt;code&gt;critical.css&lt;/code&gt; in the &lt;code&gt;head&lt;/code&gt; of each page.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;critical.css&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;The easy Sass way.&lt;/h2&gt;
&lt;p&gt;
  Use &lt;code&gt;Scssify&lt;/code&gt; to inline critical Sass.&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;
  If you prefer to write Sass you can still use &lt;code&gt;_includes&lt;/code&gt; folder to inline your critical CSS. You'll need to use Liquid's &lt;code&gt;capture&lt;/code&gt; tag and Jekyll's &lt;code&gt;scssify&lt;/code&gt; filter. The &lt;code&gt;scssify&lt;/code&gt; filter respects the Sass settings in Jekyll's &lt;code&gt;_config.yml&lt;/code&gt; file so if it's set to compress Sass it will compress the critical CSS in the &lt;code&gt;head&lt;/code&gt; of the document.
&lt;/p&gt;
&lt;p&gt;
  Create a Sass file in Jekyll's &lt;code&gt;_includes&lt;/code&gt; folder and write some Sass. In the &lt;code&gt;head&lt;/code&gt; of your document include the following snippet.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;capture&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;critical&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;style.scss&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;endcapture&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;critical&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;scssify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
   Liquid's &lt;a href=&quot;https://help.shopify.com/themes/liquid/tags/variable-tags#capture&quot;&gt;capture tag&lt;/a&gt; will store the string (in this case the Sass written the aforementioned file) as a variable that you can be referenced later. This snippet: &lt;code&gt;{{ critical | scssify }}&lt;/code&gt; will take the captured Sass and convert it CSS that is inlined in the &lt;code&gt;head&lt;/code&gt; of the document. If the &lt;code&gt;_config.yml&lt;/code&gt; is configured to compress Sass the inlined critical CSS will also be compressed.
&lt;/p&gt;

&lt;h2&gt;The slightly more complex way that is way more fun.&lt;/h2&gt;
&lt;p&gt;
  Keep all of your Sass files in the same place and use Gulp (or any task runner) to output compiled CSS into the &lt;code&gt;_includes&lt;/code&gt; folder.
&lt;/p&gt;

&lt;p&gt;
  You don't need to split up the Sass files into the &lt;code&gt;_includes&lt;/code&gt; folder and the folder you keep the rest of the sites static assets. Instead you can have a task runner process the critical Sass files and place them in the correct folder for Jekyll to process at build time.
&lt;/p&gt;

&lt;p&gt;
  This Gulp task will compile all the Sass files in the specified folder and drop them in Jekyll's &lt;code&gt;_includes&lt;/code&gt; folder. When Jekyll compiles the site it will follow the same process described above.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'critical'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/sass/critical/*.scss'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;outputStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'compressed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;includePaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'scss'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'_includes/critical'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2&gt;The way to create page specific critical CSS.&lt;/h2&gt;
&lt;p&gt;
  Marketing sites or landing pages might need their own critical CSS.
&lt;/p&gt;

&lt;p&gt;
  If you have a simple blog or a marketing site that doesn't have a lot of visual changes you can probably get away with a single critical CSS implementation. But if you're creating a series of comples landing pages the critical CSS that works great on Page One might be utterly useless on Page Two. Using Jekyll's Front Matter you can create page specific critical CSS with a little extra code.
&lt;/p&gt;

&lt;p&gt;
  In Page A's Front Matter create a new variable called &lt;em&gt;critical&lt;/em&gt; and assign it a value that will match the name of the compiled critical CSS file. So something like &lt;em&gt;pageOneCritical.css&lt;/em&gt;.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;critical: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageOneCritical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
You'll now need to modify the &lt;code&gt;head&lt;/code&gt; of the template to react to this bit of Front Matter. You can use an &lt;em&gt;if&lt;/em&gt; statement to look for the existence of the critical Font Matter and add it the the page when Jekyll compiles the site.
&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% if &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;critical&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}
   {% capture critical %}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% include &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;critical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;critical&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endcapture &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endif &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;critical&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/style&amp;gt;
  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;
  This will tell Jekyll to check for the existence of the critical variable in the page's Front Matter. If it exists it will capture the compiled CSS that the Gulp task dropped in the &lt;code&gt;_includes&lt;/code&gt; folder and inline in the &lt;code&gt;&amp;lt;style&gt;&lt;/code&gt; element.
&lt;/p&gt;

&lt;p&gt;

&lt;/p&gt;Corrections or comment can be directed to my twitter account &lt;a href=&quot;https://twitter.com/jshvgt&quot;&gt;@jshvgt&lt;/a&gt;.&lt;/p&gt;</content><category term="jekyll" /><category term="critical css" /><summary type="html">Creating Page specific critical CSS using Gulp and Jekyll's `_includes` directory
March 11, 2017</summary></entry></feed>
