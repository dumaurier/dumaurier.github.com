---
layout: "article"
title: "CSS Grid Layout and Absolute Positioning"
date: "2017-04-24 22:46"
permalink: /blog/:title/
published: true
categories: [css, css grid, layout]
tags: [css, css grid layout]
---

<header>
<h1>{{page.title}}</h1>
{{ page.date | date: '%B %d, %Y' }}
</header>

A quick explanation of `absolute` positioning when used with CSS Grid Layout.

## position: absolute; &amp; css grid layout

CSS Grid Layout allows elements with absolute positioning to be placed along a grid containers grid lines. But as with any elements that use absolute or fixed positioning things can get weird in a hurry if you're not careful. Here's what the spec says about absolute positioning:

<blockquote cite="https://www.w3.org/TR/css3-grid-layout/#abspos">
  <p>If an absolutely positioned elementâ€™s containing block is generated by a grid container, the containing block corresponds to the grid area determined by its grid-placement properties. The offset properties (top/right/bottom/left) then indicate offsets inwards from the corresponding edges of this containing block, as normal.
  </p>
  <cite><a href="https://www.w3.org/TR/css3-grid-layout/#abspos">
    CSS Grid Layout Module Level 1 -- 10. Absolute Positioning
  </a></cite>
</blockquote>

One thing to keep in mind when using `position: absolute` on an element of a grid container is that the normal rules of absolute positioning apply. This means that while you will be able to align the element to the containers grid lines, the positioned element won't take up any space in the grid nor will it effect the layout of other grid items.

This CodePen demonstrates a simple grid with an aboslutely positioned element:

<p data-height="500" data-theme-id="0" data-slug-hash="EmZmee" data-default-tab="result" data-user="josh_vogt" data-embed-version="2" data-pen-title="CSS Grid Layout - Item Placement & Absolute Positioning" class="codepen">See the Pen <a href="http://codepen.io/josh_vogt/pen/EmZmee/">CSS Grid Layout - Item Placement & Absolute Positioning</a> by Josh Vogt (<a href="http://codepen.io/josh_vogt">@josh_vogt</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

The grid items in this demo are layed out using numeric indexes and spans, auto placement and absolute positioning. Absolute positioning allows you to place grid items above or below the positioned element. Overlapping grid items can also be done by assigning items to the same parts of the grid using the `grid-row`, `grid-column` or the `grid-area` but this will impact how other grid items are aligned to the grid.

## Learn more about CSS Grid Layout.

The two easiest things to do if you want to learn more about CSS Grid Layout is follow [Rachel Andrew](https://twitter.com/rachelandrew) and [Jen Simmons](https://twitter.com/jensimmons) on Twitter and read their blogs.

- [Rachel Andrew's blog](https://rachelandrew.co.uk/archives/)
- [Jen Simmons' blog](http://jensimmons.com/writing)

### Other Resources.

- [MDN - CSS Grid Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)
- [CSS Grid Layout Module - Level 1](https://www.w3.org/TR/css3-grid-layout/)
- [Mozilla - Weird CSS Grid Demo](https://www.mozilla.org/en-US/developer/css-grid/)

Corrections or comment can be directed to my twitter account [@jshvgt](https://twitter.com/jshvgt).
